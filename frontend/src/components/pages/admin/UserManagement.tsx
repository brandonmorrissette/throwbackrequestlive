import React, { useEffect, useState } from 'react';
import Select from 'react-select';
import apiRequest from '../../routing/Request';

type User = {
    username: string;
    email: string;
    groups: string[];
};

type GroupOption = { label: string; value: string };

const UserManagement: React.FC = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [groupOptions, setGroupOptions] = useState<GroupOption[]>([]);
    const [feedback, setFeedback] = useState('');
    const [newEmail, setNewEmail] = useState('');
    const [newUsername, setNewUsername] = useState('');
    const [selectedGroups, setSelectedGroups] = useState<GroupOption[]>([]);
    const [editingUser, setEditingUser] = useState<string | null>(null); // Tracks the user being edited

    useEffect(() => {
        fetchUsers();
        fetchGroups();
    }, []);

    const fetchUsers = async () => {
        try {
            const response = await apiRequest('/api/users');
            const data = await response.json();
            setUsers(data);
        } catch (error) {
            setFeedback('Error fetching users.');
        }
    };

    const fetchGroups = async () => {
        try {
            const response = await apiRequest('/api/groups');
            const data: string[] = await response.json();
            setGroupOptions(
                data.map((group) => ({ label: group, value: group }))
            );
        } catch (error) {
            setFeedback('Error fetching groups.');
        }
    };

    const handleAddUser = async () => {
        if (!newEmail) {
            setFeedback('Email is required.');
            return;
        }

        try {
            const response = await apiRequest('/api/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: newEmail,
                    username: newUsername || '',
                    groups: selectedGroups.map((group) => group.value),
                }),
            });

            if (response.ok) {
                setFeedback(
                    `User ${newUsername || '(generated)'} added successfully.`
                );
                const newUser: User = {
                    username: newUsername || 'Generated by Cognito',
                    email: newEmail,
                    groups: selectedGroups.map((group) => group.value),
                };
                setUsers([...users, newUser]);
                setNewEmail('');
                setNewUsername('');
                setSelectedGroups([]);
            } else {
                const data = await response.json();
                setFeedback(
                    `Error adding user: ${data.message || 'Unknown error'}`
                );
            }
        } catch (error) {
            setFeedback('An unexpected error occurred.');
        }
    };

    const handleDeleteUser = async (username: string) => {
        if (!window.confirm(`Are you sure you want to delete ${username}?`)) {
            return;
        }

        try {
            const response = await apiRequest(`/api/users/${username}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                setFeedback(`User ${username} deleted successfully.`);
                setUsers(users.filter((user) => user.username !== username));
            } else {
                const data = await response.json();
                setFeedback(
                    `Error deleting user: ${data.message || 'Unknown error'}`
                );
            }
        } catch (error) {
            setFeedback('An unexpected error occurred.');
        }
    };

    const handleSaveUser = async (user: User) => {
        try {
            const response = await apiRequest(`/api/users/${user.username}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: user.email,
                    groups: user.groups,
                }),
            });

            if (response.ok) {
                setFeedback(`User ${user.username} updated successfully.`);
                setUsers(
                    users.map((u) => (u.username === user.username ? user : u))
                );
                setEditingUser(null); // Exit edit mode
            } else {
                const data = await response.json();
                setFeedback(
                    `Error updating user: ${data.message || 'Unknown error'}`
                );
            }
        } catch (error) {
            setFeedback('An unexpected error occurred.');
        }
    };

    return (
        <div>
            <h1>User Management</h1>
            {feedback && <p>{feedback}</p>}
            <table>
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>Username</th>
                        <th>Groups</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {users.map((user) =>
                        editingUser === user.username ? (
                            <tr key={user.username}>
                                <td>
                                    <input
                                        type="email"
                                        defaultValue={user.email}
                                        onChange={(e) =>
                                            (user.email = e.target.value)
                                        }
                                    />
                                </td>
                                <td>{user.username}</td>
                                <td>
                                    <Select
                                        options={groupOptions}
                                        isMulti
                                        defaultValue={user.groups.map(
                                            (group) => ({
                                                label: group,
                                                value: group,
                                            })
                                        )}
                                        onChange={(selected) =>
                                            (user.groups = (
                                                selected as GroupOption[]
                                            ).map((group) => group.value))
                                        }
                                    />
                                </td>
                                <td>
                                    <button
                                        onClick={() => handleSaveUser(user)}
                                    >
                                        Save
                                    </button>
                                    <button
                                        onClick={() => setEditingUser(null)}
                                    >
                                        Cancel
                                    </button>
                                </td>
                            </tr>
                        ) : (
                            <tr key={user.username}>
                                <td>{user.email}</td>
                                <td>{user.username}</td>
                                <td>{user.groups.join(', ')}</td>
                                <td>
                                    <button
                                        onClick={() =>
                                            setEditingUser(user.username)
                                        }
                                    >
                                        Edit
                                    </button>
                                    <button
                                        onClick={() =>
                                            handleDeleteUser(user.username)
                                        }
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        )
                    )}
                    <tr>
                        <td>
                            <input
                                type="email"
                                placeholder="Enter email (required)"
                                value={newEmail}
                                onChange={(e) => setNewEmail(e.target.value)}
                            />
                        </td>
                        <td>
                            <input
                                type="text"
                                placeholder="Enter username (optional)"
                                value={newUsername}
                                onChange={(e) => setNewUsername(e.target.value)}
                            />
                        </td>
                        <td>
                            <Select
                                options={groupOptions}
                                isMulti
                                value={selectedGroups}
                                onChange={(selected) =>
                                    setSelectedGroups(selected as GroupOption[])
                                }
                                placeholder="Select groups"
                            />
                        </td>
                        <td>
                            <button onClick={handleAddUser}>Add</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    );
};

export default UserManagement;

name: Deployment Workflow

on:
    workflow_dispatch:
        inputs:
            stack-name:
                description: 'Comma-separated list of stacks to deploy (default: Empty to run all)'
                required: false
                default: ''

jobs:
    deploy-app:
        if: ${{ inputs.stack-name == '' }}
        uses: ./.github/workflows/deployApp.yml
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-network-stack:
        if: ${{ inputs.stack-name != '' && contains(inputs.stack-name, 'NetworkStack') }}
        uses: ./.github/workflows/deployStack.yml
        with:
            stack-name: NetworkStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-user-stack:
        if: ${{ inputs.stack-name != '' && contains(inputs.stack-name, 'UserStack') }}
        uses: ./.github/workflows/deployStack.yml
        with:
            stack-name: UserStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-compute-stack:
        if: ${{ inputs.stack-name != '' && contains(inputs.stack-name, 'ComputeStack') }}
        uses: ./.github/workflows/deployStack.yml
        with:
            stack-name: ComputeStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-storage-stack:
        if: ${{ inputs.stack-name != '' && contains(inputs.stack-name, 'StorageStack') }}
        uses: ./.github/workflows/deployStack.yml
        with:
            stack-name: StorageStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-runtime-stack:
        if: ${{ inputs.stack-name != '' && contains(inputs.stack-name, 'RuntimeStack') }}
        uses: ./.github/workflows/deployStack.yml
        with:
            stack-name: RuntimeStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    create-superuser:
        if: ${{ inputs.stack-name != '' && contains(inputs.stack-name, 'create-superuser') }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: Invoke Lambda to create Cognito user
              run: |
                  aws lambda invoke \
                  --function-name create-superuser-lambda \
                  --payload '{"email": "${{ vars.SUPERUSER_EMAIL}}"}' \
                  response.json \
                  --cli-binary-format raw-in-base64-out
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-sql-files:
        if: ${{ inputs.stack-name != '' && contains(inputs.stack-name, 'deploy-sql-files') }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: Deploy SQL files
              run: |
                  for file in backend/infra/schema/*.sql; do
                      psql postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/throwbackrequestlive -f $file
                  done

name: Deploy CDK Stack and Trigger Schema Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch: 

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" 

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.12" 

      - name: Install CDK and project dependencies
        run: |
          npm install -g aws-cdk
          pip install -r requirements.txt
          pip install aws-cdk-lib constructs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CDK Stack
        run: cdk deploy --app "python infra/app.py" --require-approval never

      - name: Retrieve EC2 Instance ID
        run: |
          echo "EC2_INSTANCE_ID=$(aws ec2 describe-instances --filters 'Name=tag:Name,Values=DeploymentInstance*' --query 'Reservations[0].Instances[0].InstanceId' --output text)" >> $GITHUB_ENV

      - name: Apply Schema via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$EC2_INSTANCE_ID\"]}]" \
            --parameters '{
              "commands": [
                "for file in $(ls /mnt/schema/*.sql | sort); do",
                "  echo Applying $file",
                "  PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f $file",
                "done"
              ]
            }' \
            --region $AWS_REGION

      - name: Create Cognito Superuser
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          USER_POOL_ID: ${{ secrets.USER_POOL_ID }}
          SUPERUSER_EMAIL: ${{ secrets.SUPERUSER_EMAIL }}
          SUPERUSER_PASSWORD: ${{ env.SUPERUSER_PASSWORD }}
        run: |
          aws cognito-idp admin-create-user \
            --user-pool-id $USER_POOL_ID \
            --username superuser \
            --temporary-password "$SUPERUSER_PASSWORD" \
            --user-attributes Name=email,Value=$SUPERUSER_EMAIL \
            --message-action SUPPRESS
          
          aws cognito-idp admin-add-user-to-group \
            --user-pool-id $USER_POOL_ID \
            --username superuser \
            --group-name Admin
name: Deploy App

on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    deploy-core-stack:
        uses: ./.github/workflows/deployBackend.yml
        with:
            stack-name: CoreStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-cluster-stack:
        needs: deploy-core-stack
        uses: ./.github/workflows/deployBackend.yml
        with:
            stack-name: ClusterStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-storage-stack:
        needs: deploy-core-stack
        uses: ./.github/workflows/deployBackend.yml
        with:
            stack-name: StorageStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-setup-stack:
        uses: ./.github/workflows/deployBackend.yml
        with:
            stack-name: SetupStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-runtime-stack:
        uses: ./.github/workflows/deployFrontend.yml
        with:
            stack-name: RuntimeStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    setup-runtime-environment:
        needs: deploy-setup-stack
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: Invoke Lambda to create Cognito user
              run: |
                  aws lambda invoke \
                  --function-name create-superuser-lambda \
                  --payload '{"email": "${{ vars.SUPERUSER_EMAIL}}"}' \
                  response.json \
                  --cli-binary-format raw-in-base64-out
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_REGION: ${{ secrets.AWS_REGION }}

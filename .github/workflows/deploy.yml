name: Deploy CDK Stack and Trigger Schema Deployment

on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    deploy-core:
        uses: ./.github/workflows/deployCDK.yml
        with:
            stack-name: CoreStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-cluster:
        needs: deploy-core
        uses: ./.github/workflows/deployCDK.yml
        with:
            stack-name: ClusterStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-storage:
        needs: deploy-core
        uses: ./.github/workflows/deployCDK.yml
        with:
            stack-name: StorageStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-setup:
        uses: ./.github/workflows/deployCDK.yml
        with:
            stack-name: SetupStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    deploy-runtime:
        needs: [deploy-cluster, deploy-storage]
        uses: ./.github/workflows/deployCDK.yml
        with:
            stack-name: RuntimeStack
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

    setup-environment:
        needs: deploy-setup
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: Invoke Lambda to create Cognito user
              run: |
                  aws lambda invoke \
                  --function-name create-superuser-lambda \
                  --payload '{"email": "${{env.SUPERUSER_EMAIL}}"}' \
                  response.json \
                  --cli-binary-format raw-in-base64-out
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_REGION: ${{ secrets.AWS_REGION }}
